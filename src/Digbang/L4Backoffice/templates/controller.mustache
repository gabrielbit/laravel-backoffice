<?php namespace {{ getNamespace }};

use Digbang\L4Backoffice\Backoffice;
use Digbang\L4Backoffice\Repositories\BackofficeRepository;
use Digbang\L4Backoffice\Repositories\BackofficeRepositoryFactory;
use Digbang\L4Backoffice\Listings\Listing;
use Digbang\L4Backoffice\Exceptions\ValidationException;
use Illuminate\Routing\Controller;
use Illuminate\Support\Collection;
use Digbang\FontAwesome\Facade as FontAwesome;
use {{ entityNamespace}}\{{ model }};
{{# uniqueDependencies }}
use {{ entityNamespace }}\{{ studlyCase }};
{{/ uniqueDependencies }}

class {{ classData.name }}Controller extends Controller
{
	/**
     * @var \Digbang\L4Backoffice\Backoffice
     */
    protected $backoffice;

    /**
     * @var \Digbang\L4Backoffice\Repositories\BackofficeRepository
     */
    protected ${{ classData.snake }}Repository;

    {{# uniqueDependencies }}
    /**
     * @var \Digbang\L4Backoffice\Repositories\BackofficeRepository
     */
    protected ${{ camelCase }}Repository;
    {{/ uniqueDependencies }}

    protected $title = '{{ classData.name }}';

    protected $titlePlural = '{{ classData.plural }}';

	function __construct(Backoffice $backoffice, BackofficeRepositoryFactory $repositoryFactory)
	{
		$this->backoffice = $backoffice;
		$this->{{ classData.snake }}Repository = $repositoryFactory->makeForEloquentModel(new {{ model }}());

		// Dependencies
		{{# uniqueDependencies }}
		$this->{{ camelCase }}Repository = $repositoryFactory->makeForEloquentModel(new {{ studlyCase }}());
		{{/ uniqueDependencies }}
	}

	public function index()
	{
		$list = $this->getListing();

		$this->buildFilters($list);

		$this->buildListActions($list);

		$list->fill($this->getData());

		$breadcrumb = $this->backoffice->breadcrumb(
			['Home' => route('backoffice.index'), $this->title]
		);

		return \View::make('l4-backoffice::index', [
			'title'      => $this->titlePlural,
			'list'       => $list,
			'breadcrumb' => $breadcrumb
		]);
	}

	public function create()
	{
		$label = \Lang::get('l4-backoffice::default.new', ['model' => $this->title]);

		$form = $this->buildForm(
			route('backoffice.{{ classData.snake }}.store'),
			$label,
			'POST',
			route('backoffice.{{ classData.snake }}.index')
		);

		$breadcrumb = $this->backoffice->breadcrumb([
			'Home' => route('backoffice.index'),
			$this->title => route('backoffice.{{ classData.snake }}.index'),
			$label
		]);

		return \View::make('l4-backoffice::create', [
			'title'      => $this->titlePlural,
			'form'       => $form,
			'breadcrumb' => $breadcrumb
		]);
	}

	public function store()
	{
		$inputData = array_filter(\Input::only([
            {{# inputs }}
            '{{ name }}',
            {{/ inputs }}
            {{# dependencies }}
            '{{ column }}',
            {{/ dependencies }}
        ]), function($input){
            return !empty($input) && $input !== false;
        });

		try
		{
			$this->validate($inputData);

			${{ classData.camel }} = $this->{{ classData.snake }}Repository->create($inputData);

			return \Redirect::to(route('backoffice.{{ classData.snake }}.show', ${{ classData.camel }}->getKey()));
		}
		catch (ValidationException $e)
		{
			return \Redirect::back()->withInput()->withErrors($e->getErrors());
		}
	}

	public function show($id)
	{
		/* @var $entity {{ model }} */
		$entity = $this->{{ classData.snake }}Repository->findById($id);

		$breadcrumb = $this->backoffice->breadcrumb([
			'Home'    => route('backoffice.index'),
			$this->titlePlural => route('backoffice.{{ classData.snake }}.index'),
			$entity->{{ titleGetter }}
		]);

		return \View::make('l4-backoffice::show', [
			'title'      => $this->titlePlural,
			'breadcrumb' => $breadcrumb,
			'label'      => $entity->{{ titleGetter }},
			'data'       => $entity->toArray(),
			'editAction' => route('backoffice.{{ classData.snake }}.edit', $id),
			'backAction' => route('backoffice.{{ classData.snake }}.index')
		]);
	}

	public function edit($id)
	{
		/* @var $entity {{ model }} */
		$entity = $this->{{ classData.snake }}Repository->findById($id);

		$label = \Lang::get('l4-backoffice::default.edit');

		$form = $this->buildForm(
			route('backoffice.{{ classData.snake }}.update', $id),
			$label,
			'PUT',
			route('backoffice.{{ classData.snake }}.show', $id)
		);

		$form->fill([
			{{# inputs }}
			'{{ name }}' => $entity->{{ name }},
			{{/ inputs }}
			{{# dependencies }}
			'{{ column }}' => $entity->{{ column }},
			{{/ dependencies }}
		]);

		$breadcrumb = $this->backoffice->breadcrumb([
			'Home' => route('backoffice.index'),
			$this->titlePlural => route('backoffice.{{ classData.snake }}.index'),
			$entity->{{ titleGetter }} => route('backoffice.{{ classData.snake }}.show', $id),
			\Lang::get('l4-backoffice::default.edit')
		]);

		return \View::make('l4-backoffice::edit', [
			'title'      => 'Edit {{ classData.name }}',
			'form'       => $form,
			'breadcrumb' => $breadcrumb
		]);
	}

	public function update($id)
	{
		/* @var $entity {{ model }} */
        $entity = $this->{{ classData.snake }}Repository->findById($id);

		// Get the input
		$input = \Input::only([
			{{# inputs }}
            '{{ name }}',
            {{/ inputs }}
		]);

		// Fill it with non-empty input
		$entity->fill(array_filter($input, function($value){
			return !empty($value) && $value !== false;
		}));

		try
		{
			// Try to save it
			$entity->save();

			// Redirect to show
			return \Redirect::route('backoffice.{{ classData.snake }}.show', [$entity->getKey()]);
		}
		catch (ValidationException $e)
		{
			// Or redirect back with the errors
			return \Redirect::back()->withInput()->withErrors($e->getErrors());
		}
	}

	public function destroy($id)
	{
		try
		{
			// Try to destroy the entity
			$this->{{ classData.snake }}Repository->destroy($id);

			// Redirect to the listing
			return \Redirect::route('backoffice.{{ classData.snake }}.index')->with(['success' => "{{ classData.name }} $id deleted"]);
		}
		catch (ValidationException $e)
		{
			return \Redirect::back()->withErrors($e->getErrors());
		}
	}

	protected function buildForm($target, $label, $method = 'POST', $cancelAction = '', $options = [])
	{
		$form = $this->backoffice->form($target, $label, $method, $cancelAction, $options);

		$inputs = $form->inputs();

		{{# dependencies }}
		${{ camelCase }} = ['', ''] + array_pluck($this->{{ camelCase }}Repository->all(), '{{ titleGetter }}', 'id');
		$inputs->dropdown('{{ column }}', '{{ title }}', ${{ camelCase }});
		{{/ dependencies }}
		{{# inputs }}
		$inputs->{{ type }}('{{ name }}', '{{ title }}');
		{{/ inputs }}

		return $form;
	}

	/**
	 * @param $list
	 */
	protected function buildFilters(Listing $list)
	{
		$filters = $list->filters();

		// Here we add filters to the list
		{{# inputs }}
		$filters->{{ type }}('{{ name }}', '{{ title }}', ['class' => 'form-control']);
		{{/ inputs }}

		// And filter dependencies
		{{# dependencies }}
        ${{ camelCase }} = [''];
        foreach ($this->{{ camelCase }}Repository->all() as ${{ singular }})
        {
            ${{ camelCase }}[${{ singular }}->id] = ${{ singular }}->{{ titleGetter  }};
        }

        $filters->dropdown('{{ column }}', '{{ title }}', ${{ camelCase }});

        {{/ dependencies }}
	}

	/**
	 * @return mixed
	 */
	protected function getListing()
	{
		$listing = $this->backoffice->listing([
			{{# columns }}
			'{{ name }}' => '{{ title }}',
			{{/ columns }}
		]);

		$columns = $listing->columns();
		$columns
			->hide([{{ columns_hide }}])
			->sortable([
			{{# inputs }}
				'{{ name }}',
			{{/ inputs }}
		]);

		return $listing;
	}

	protected function buildListActions(Listing $list)
	{
		$list->setActions(
			$this->backoffice->actions()
				->link(route('backoffice.{{ classData.snake }}.create'), 'New {{ classData.name }}', ['class' => 'btn btn-primary'])
		);

		$list->setRowActions(
			$this->backoffice->actions()
				// View icon
				->link(function(Collection $row) {
					return route('backoffice.{{ classData.snake }}.show', $row['id']);
				}, FontAwesome::icon('eye'), ['data-toggle' => 'tooltip', 'data-placement' => 'top', 'title' => \Lang::get('l4-backoffice::default.show')])
				// Edit icon
				->link(function(Collection $row){
					return route('backoffice.{{ classData.snake }}.edit', $row['id']);
				}, FontAwesome::icon('edit'), ['data-toggle' => 'tooltip', 'data-placement' => 'top', 'title' => \Lang::get('l4-backoffice::default.edit')])
				// Delete icon
				->form(
					function(Collection $row){
						return route('backoffice.{{ classData.snake }}.destroy', $row['id']);
					},
					FontAwesome::icon('times'),
					'DELETE',
					[
						'class'          => 'text-danger',
						'data-toggle'    => 'tooltip',
						'data-placement' => 'top',
						'data-confirm'   => \Lang::get('l4-backoffice::default.delete-confirm'),
						'title'          => \Lang::get('l4-backoffice::default.delete')
					],
					true
				)
		);
	}

	/**
	 * @return array
	 */
	protected function getData()
	{
		return $this->{{ classData.snake }}Repository->search(
            \Input::except(['page', 'sort_by', 'sort_sense']),
            \Input::get('sort_by'),
            \Input::get('sort_sense'),
            10,
            \Input::get('page', 1)
        );
	}

	protected function setRepository(BackofficeRepository $backofficeRepository)
    {
        $this->{{ classData.snake }}Repository = $backofficeRepository;
    }

    protected function validate($inputData)
    {
        {{# hasRequiredFields }}
        $validationRules = [
            {{# requiredFields }}
            '{{ name }}' => 'required',
            {{/ requiredFields }}
        ];

        $validationMsgs = [
            {{# requiredFields }}
            '{{ name }}.required' => 'The {{ title }} field is required.',
            {{/ requiredFields }}
        ];

        $validator = \Validator::make($inputData, $validationRules, $validationMsgs);

        if ($validator->fails())
        {
            throw new ValidationException($validator->errors());
        }
        {{/ hasRequiredFields }}
    }
}
