<?php namespace {{ theNamespace }};

use {{ api.fqcn }};
use Digbang\FontAwesome\Facade as fa;
use Digbang\L4Backoffice\Backoffice;
use Digbang\L4Backoffice\Exceptions\ValidationException;
use Digbang\Security\Permissions\Exceptions\PermissionException;
use Digbang\Security\Urls\SecureUrl;
use Illuminate\Http\Request;
use Illuminate\Routing\Controller;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\View;
use Illuminate\Support\Facades\Redirect;
use Illuminate\Support\Facades\Validator;
{{# methods.hasExport }}
use Maatwebsite\Excel\Excel;
{{/ methods.hasExport }}

class {{ className.studly }}Controller extends Controller
{
	/**
     * @type \Digbang\L4Backoffice\Backoffice
     */
    private $backoffice;

{{# methods.hasExport }}
	/**
     * @type \Maatwebsite\Excel\Excel
     */
    private $excel;

{{/ methods.hasExport }}
    /**
     * @type \Digbang\Security\Urls\SecureUrl
     */
    private $url;

    /**
     * @type Request
     */
    private $request;

    /**
     * @type {{ api.basename }}
     */
    private $api;

	/**
	 * @type string
	 */
    private $title = '{{ className.title }}';

	/**
	 * @type string
	 */
    private $titlePlural = '{{ className.title.plural }}';

    /**
     * @param Backoffice $backoffice
{{# methods.hasExport }}
	 * @param Excel $excel,
{{/ methods.hasExport }}
     * @param SecureUrl $url
     * @param Request $request
     * @param {{ api.basename }} $api
     */
	public function __construct(
		Backoffice $backoffice,
{{# methods.hasExport }}
		Excel $excel,
{{/ methods.hasExport }}
		SecureUrl $url,
		Request $request,
		{{ api.basename }} $api
	)
	{
		$this->backoffice = $backoffice;
{{# methods.hasExport }}
		$this->excel      = $excel;
{{/ methods.hasExport }}
		$this->url        = $url;
		$this->request    = $request;
		$this->api        = $api;
	}

	{{# methods.hasIndex }}
	{{# methods.index }}
	/**
	 * @return \Illuminate\View\View
	 */
	public function index()
	{
		$listing = $this->backoffice->listing([
			// TODO: Fill this with columns as key => Label
		]);

		$columns = $listing->columns();
		$columns
			->hide([ /* array of keys to hide */ ])
			->sortable([ /* array of keys that can be sorted */ ]);

		$filters = $listing->filters();

		// Here we add filters to the list
		{{# params }}
		$filters->{{ input }}('{{ name }}', '{{ name.title }}', ['class' => 'form-control']);
		{{/ params }}

		// List actions appear at the top left corner of the listing's box
		$listActions = $this->backoffice->actions();
		{{# methods.hasCreate }}

		try
		{
			$listActions->build()
                ->to($this->url->route('backoffice.{{ className.snake.plural }}.create'))
				->labeled(fa::icon('plus') . trans('l4-backoffice::default.new', ['model' => $this->title]))
				->addClass('btn btn-primary')
				->asLink();
        }
		catch (PermissionException $e) { /* User doesn't have permission to do this */ }
		{{/ methods.hasCreate }}
		{{# methods.hasExport }}

        try
        {
            $listActions->build()
                ->to($this->url->route('backoffice.{{ className.snake.plural }}.export', $this->request->all()))
                ->labeled(fa::icon('file-excel-o') . ' ' . trans('l4-backoffice::default.export'))
                ->addClass('btn btn-success')
                ->asLink();
        }
        catch (PermissionException $e) { /* User doesn't have permission to do this */ }
        {{/ methods.hasExport }}

		$listing->setActions($listActions);

		// Row actions are actions that will be rendered on each of the listing's rows
		$rowActions = $this->backoffice->actions();
		{{# methods.hasRead }}

		// Link to the READ route
		$rowActions->build()
			->to(function(Collection $row) {
				return $this->url->route('backoffice.{{ className.snake.plural }}.show', $row['id']);
			})
			->labeled(fa::icon('eye'))
			->addDataToggle('tooltip')
			->addDataPlacement('top')
			->addTitle(trans('l4-backoffice::default.show'))
			->asLink();
		{{/ methods.hasRead }}
		{{# methods.hasUpdate }}

		// Link to the EDIT route
		$rowActions->build()
			->to(function(\Illuminate\Support\Collection $row) {
				return $this->url->route('backoffice.{{ className.snake.plural }}.edit', $row['id']);
			})
			->labeled(fa::icon('edit'))
			->addClass('text-success')
			->addDataToggle('tooltip')
			->addDataPlacement('top')
			->addTitle(trans('l4-backoffice::default.edit'))
			->asLink();
		{{/ methods.hasUpdate }}
		{{# methods.hasDelete }}

		// Form (link) to the DELETE route
		$rowActions->build()
			->to(function(\Illuminate\Support\Collection $row){
				return $this->url->route('backoffice.{{ className.snake.plural }}.destroy', $row['id']);
			})
			->labeled(fa::icon('times'))
			->addClass('text-danger')
			->addDataToggle('tooltip')
			->addDataPlacement('top')
			->addDataConfirm(trans('l4-backoffice::default.delete-confirm'))
			->addTitle(trans('l4-backoffice::default.delete'))
			->asForm('DELETE');
		{{/ methods.hasDelete }}

		$listing->setRowActions($rowActions);

		$results = $this->api->{{ apiMethod }}(
			// TODO: Fill in with your parameters
		);

		$listing->fill($results);

		$breadcrumb = $this->backoffice->breadcrumb([
			trans('l4-backoffice::default.home') => 'backoffice.index',
			$this->titlePlural
		]);

		return View::make('l4-backoffice::index', [
			'title'      => $this->titlePlural,
			'list'       => $listing,
			'breadcrumb' => $breadcrumb
		]);
	}
	{{/ methods.index }}
	{{/ methods.hasIndex }}

	{{# methods.hasCreate }}
	{{# methods.create }}
	/**
	 * @return \Illuminate\View\View
	 */
	public function create()
	{
		$label = trans('l4-backoffice::default.new', ['model' => $this->title]);

		$form = $this->backoffice->form(
			$this->url->route('backoffice.{{ className.snake.plural }}.store'),
			$label,
			'POST',
			$this->url->bestRoute(['backoffice.{{ className.snake.plural }}.index', 'backoffice.index'])
		);

		$inputs = $form->inputs();

		// TODO: fill dropdowns with corresponding options
		{{# params }}
		$inputs->{{ input }}('{{ name }}', '{{ name.title }}', []);
		{{/ params }}

		$breadcrumb = $this->backoffice->breadcrumb([
			trans('l4-backoffice::default.home') => 'backoffice.index',
			$this->titlePlural                   => 'backoffice.{{ className.snake.plural }}.index',
			$label
		]);

		return View::make('l4-backoffice::create', [
			'title'      => $this->titlePlural,
			'form'       => $form,
			'breadcrumb' => $breadcrumb
		]);
	}

	public function store()
	{
		$data = $this->request->only([
        {{# params }}
            '{{ name }}',
        {{/ params }}
        ]);

		try
		{
			$this->validate($data);

			${{ className.camel }} = $this->api->{{ apiMethod }}(...$data);

			// TODO: Gen has assumed a getId() method on your entity. Change it as needed.
			return Redirect::to($this->url->route('backoffice.{{ className.snake.plural }}.show', ${{ className.camel }}->getId()));
		}
		catch (ValidationException $e)
		{
			return Redirect::back()->withInput()->withErrors($e->getErrors());
		}
	}
	{{/ methods.create }}
	{{/ methods.hasCreate }}

	{{# methods.hasRead }}
	{{# methods.read }}
	/**
	 * @return \Illuminate\View\View
	 */
	public function show($id)
	{
		${{ className.camel }} = $this->api->{{ apiMethod }}($id);

		$breadcrumb = $this->backoffice->breadcrumb([
			trans('l4-backoffice::default.home') => 'backoffice.index',
			$this->titlePlural                   => 'backoffice.{{ className.snake.plural }}.index',
			$id
		]);

		$data = [
			// TODO: Fill this with your entity's data as Label => value
		];

		$actions    = $this->backoffice->actions();
		$topActions = $this->backoffice->actions();
		{{# methods.hasEdit }}

		try
		{
			$actions->build()
				->to($this->url->route('backoffice.{{ className.snake.plural }}.edit', $id))
				->labeled(fa::icon('edit') . ' ' . trans('l4-backoffice::default.edit'))
				->addClass('btn btn-success')
				->asLink();
		}
		catch (PermissionException $e) { /* User doesn't have permission to do this */ }
		{{/ methods.hasEdit }}
		{{# methods.hasIndex }}

		try
		{
			$actions->build()
				->to($this->url->route('backoffice.{{ className.snake.plural }}.index'))
				->labeled(trans('l4-backoffice::default.back'))
				->addClass('btn btn-default')
				->asLink();
		}
		catch (PermissionException $e) { /* User doesn't have permission to do this */ }

		try
		{
			$topActions->build()
				->to($this->url->route('backoffice.{{ className.snake.plural }}.index'))
				->labeled(fa::icon('arrow-left') . ' ' . trans('l4-backoffice::default.back'))
				->asLink();
		}
		catch (PermissionException $e) { /* User doesn't have permission to do this */ }
		{{/ methods.hasIndex }}

		return View::make('l4-backoffice::show', [
			'title'      => $this->titlePlural,
			'breadcrumb' => $breadcrumb,
			'label'      => $id,
			'data'       => $data,
			'actions'    => $actions,
			'topActions' => $topActions
		]);
	}
	{{/ methods.read }}
	{{/ methods.hasRead }}

	{{# methods.hasUpdate }}
	{{# methods.update }}
	/**
	 * @return \Illuminate\View\View
	 */
	public function edit($id)
	{
		{{# methods.hasRead }}
		{{# methods.read }}
		${{ className.camel }} = $this->api->{{ apiMethod }}($id);
		{{/ methods.read }}
		{{/ methods.hasRead }}
		{{^ methods.hasRead }}
		// TODO: The gen assumed a find method here. Change it to whatever suits you.
		${{ className.camel }} = $this->api->find($id);
		{{/ methods.hasRead }}

		$label = trans('l4-backoffice::default.edit_model', ['model' => $this->title]);

		$form = $this->backoffice->form(
			$this->url->route('backoffice.{{ className.snake.plural }}.store'),
			$label,
			'POST',
			$this->url->bestRoute(['backoffice.{{ className.snake.plural }}.index', 'backoffice.index'])
		);

		$inputs = $form->inputs();

		// TODO: fill dropdowns with corresponding options
		{{# params }}
		$inputs->{{ input }}('{{ name }}', '{{ name.title }}', []);
		{{/ params }}

		$form->fill([
		{{# params }}
			'{{ name }}' => ${{ className.camel }}->get{{ name.studly }}(),
		{{/ params }}
		]);

		$breadcrumb = $this->backoffice->breadcrumb([
			trans('l4-backoffice::default.home') => 'backoffice.index',
			$this->titlePlural                   => 'backoffice.{{ className.snake.plural }}.index',
			$id                                  => ['backoffice.{{ className.snake.plural }}.show', $id],
			trans('l4-backoffice::default.edit')
		]);

		return View::make('l4-backoffice::edit', [
			'title'      => $label,
			'form'       => $form,
			'breadcrumb' => $breadcrumb
		]);
	}

	public function update($id)
	{
		{{# methods.hasRead }}
		{{# methods.read }}
		${{ className.camel }} = $this->api->{{ apiMethod }}($id);
		{{/ methods.read }}
		{{/ methods.hasRead }}
		{{^ methods.hasRead }}
		// TODO: The gen assumed a find method here. Change it to whatever suits you.
		${{ className.camel }} = $this->api->find($id);
		{{/ methods.hasRead }}

		$data = $this->request->only([
        {{# params }}
			'{{ name }}',
		{{/ params }}
        ]);

		try
		{
			// Validate the input
			$this->validate($data);

			$this->api->{{ apiMethod }}(...$data);

			// Redirect to show
			return Redirect::to($this->url->route('backoffice.{{ className.snake.plural }}.show', [$id]));
		}
		catch (ValidationException $e)
		{
			// Or redirect back with the errors
			return Redirect::back()->withInput()->withErrors($e->getErrors());
		}
		catch (PermissionException $e)
		{
			return Redirect::to($this->url->route('backoffice.index'))->withDanger(trans('l4-backoffice::auth.permission_error'));
		}
	}
	{{/ methods.update }}
	{{/ methods.hasUpdate }}

	{{# methods.hasDelete }}
	{{# methods.delete }}
	public function destroy($id)
	{
		try
		{
			// Try to destroy the entity
			$this->api->{{ apiMethod }}($id);

			// Redirect to the listing
			return Redirect::to($this->url->route('backoffice.{{ className.snake.plural }}.index'))
				->withSuccess(trans('l4-backoffice::default.delete_msg', ['model' => $this->title, 'id' => $id]));
		}
		catch (ValidationException $e)
		{
			return Redirect::back()->withDanger(implode('<br/>', $e->getErrors()));
		}
		catch (PermissionException $e)
		{
			return Redirect::to($this->url->route('backoffice.index'))->withDanger(trans('l4-backoffice::auth.permission_error'));
		}
	}
	{{/ methods.delete }}
	{{/ methods.hasDelete }}

	{{# methods.hasExport }}
	{{# methods.export }}
	/**
	 * @return void
	 */
	public function export()
	{
		$listing = $this->backoffice->listing([
			{{# params }}
			'{{ name }}' => '{{ name.title }}',
			{{/params}}
		]);

		$columns = $listing->columns();
		$columns->hide([])->sortable([]);

		$results = $this->api->{{ apiMethod }}(...$this->request->only([
			{{# params }}
			'{{ name }}',
			{{/ params }}
		]));

		$listing->fill($results);

		$rows = $listing->rows();

		$this->excel->create(\Str::slug($this->titlePlural), function($excel) use ($columns, $rows) {
			$excel->sheet($this->titlePlural, function($sheet) use ($columns, $rows) {
				$sheet->loadView('l4-backoffice::lists.list', [
					'bulkActions' => [],
					'rowActions' => [],
					'columns' => $columns->visible(),
					'items' => $rows
				]);
			});
		})->download('xls');
	}
	{{/ methods.export }}
	{{/ methods.hasExport }}

	/**
	 * @throws ValidationException
     */
    private function validate($data)
    {
		// TODO: apply custom validation here.
    }
}
