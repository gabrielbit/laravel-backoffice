<?php namespace {{ getNamespace }};

use Digbang\L4Backoffice\Backoffice;
use Digbang\L4Backoffice\Repositories\BackofficeRepository;
use Digbang\L4Backoffice\Repositories\BackofficeRepositoryFactory;
use Digbang\L4Backoffice\Listings\Listing;
use Digbang\L4Backoffice\Exceptions\ValidationException;
use Digbang\Security\Urls\SecureUrl;
use Digbang\Security\Permissions\Exceptions\PermissionException;
use Illuminate\Routing\Controller;
use Digbang\FontAwesome\Facade as FontAwesome;
use Maatwebsite\Excel\Excel;
use {{ entityNamespace}}\{{ model }};
{{# uniqueDependencies }}
use {{ entityNamespace }}\{{ studlyCase }};
{{/ uniqueDependencies }}

class {{ classData.name }}Controller extends Controller
{
	/**
     * @var \Digbang\L4Backoffice\Backoffice
     */
    protected $backoffice;

    /**
     * @var \Digbang\L4Backoffice\Repositories\BackofficeRepository
     */
    protected ${{ classData.snake }}Repository;

	/**
     * @var \Maatwebsite\Excel\Excel
     */
    protected $excelExporter;

    /**
     * @var \Digbang\Security\Urls\SecureUrl
     */
    protected $secureUrl;

    {{# uniqueDependencies }}
    /**
     * @var \Digbang\L4Backoffice\Repositories\BackofficeRepository
     */
    protected ${{ camelCase }}Repository;
    {{/ uniqueDependencies }}

    protected $title       = '{{ classData.name }}';
    protected $titlePlural = '{{ classData.plural }}';

	function __construct(Backoffice $backoffice, BackofficeRepositoryFactory $repositoryFactory, Excel $excelExporter, SecureUrl $secureUrl)
	{
		$this->backoffice = $backoffice;
		$this->{{ classData.snake }}Repository = $repositoryFactory->makeForEloquentModel(new {{ model }}());

		$this->excelExporter = $excelExporter;
		$this->secureUrl = $secureUrl;

		{{# hasDependencies }}
		// Dependencies
		{{# uniqueDependencies }}
		$this->{{ camelCase }}Repository = $repositoryFactory->makeForEloquentModel(new {{ studlyCase }}());
		{{/ uniqueDependencies }}
		{{/ hasDependencies }}
	}

	public function index()
	{
		$list = $this->getListing();

		$this->buildFilters($list);

		$this->buildListActions($list);

		$list->fill($this->getData());

		$breadcrumb = $this->backoffice->breadcrumb(
			['Home' => 'backoffice.index', $this->titlePlural]
		);

		return \View::make('l4-backoffice::index', [
			'title'      => $this->titlePlural,
			'list'       => $list,
			'breadcrumb' => $breadcrumb
		]);
	}

	public function create()
	{
		$label = \Lang::get('l4-backoffice::default.new', ['model' => $this->title]);

		$form = $this->buildForm(
			$this->secureUrl->route('backoffice.{{ classData.snake }}.store'),
			$label,
			'POST',
			$this->secureUrl->route('backoffice.{{ classData.snake }}.index')
		);

		$breadcrumb = $this->backoffice->breadcrumb([
			'Home' => 'backoffice.index',
			$this->titlePlural => 'backoffice.{{ classData.snake }}.index',
			$label
		]);

		return \View::make('l4-backoffice::create', [
			'title'      => $this->titlePlural,
			'form'       => $form,
			'breadcrumb' => $breadcrumb
		]);
	}

	public function store()
	{
		$inputData = array_filter(\Input::only([
            {{# inputs }}
            '{{ name }}',
            {{/ inputs }}
            {{# dependencies }}
            '{{ column }}',
            {{/ dependencies }}
        ]), function($input){
            return !empty($input) && $input !== false;
        });

		try
		{
			$this->validate($inputData);

			${{ classData.camel }} = $this->{{ classData.snake }}Repository->create($inputData);

			return \Redirect::to($this->secureUrl->route('backoffice.{{ classData.snake }}.show', ${{ classData.camel }}->getKey()));
		}
		catch (ValidationException $e)
		{
			return \Redirect::back()->withInput()->withErrors($e->getErrors());
		}
	}

	public function show($id)
	{
		/* @var $entity {{ model }} */
		$entity = $this->{{ classData.snake }}Repository->findById($id);

		$breadcrumb = $this->backoffice->breadcrumb([
			'Home'    => 'backoffice.index',
			$this->titlePlural => 'backoffice.{{ classData.snake }}.index',
			$entity->{{ titleGetter }}
		]);

		$data = [
			{{# dependencies }}
			'{{ title }}' => $entity->{{ singular }}->{{ titleGetter }},
			{{/ dependencies }}
			{{# inputs }}
			'{{ title }}' => $entity->{{ nameAccessor }},
			{{/ inputs }}
		];

		$actions = $this->backoffice->actions();

		try {
			$actions->link($this->secureUrl->route('backoffice.{{ classData.snake }}.edit', $id), FontAwesome::icon('edit') . ' ' . \Lang::get('l4-backoffice::default.edit'), ['class' => 'btn btn-success']);
		} catch (PermissionException $e) {}

		try {
			$actions->link($this->secureUrl->route('backoffice.{{ classData.snake }}.index'), \Lang::get('l4-backoffice::default.back'), ['class' => 'btn btn-default']);
		} catch (PermissionException $e) {}

		$topActions = $this->backoffice->actions();
		try {
			$topActions->link($this->secureUrl->route('backoffice.{{ classData.snake }}.index'), FontAwesome::icon('arrow-left') . ' ' . \Lang::get('l4-backoffice::default.back'));
		} catch (PermissionException $e) {}

		return \View::make('l4-backoffice::show', [
			'title'      => $this->titlePlural,
			'breadcrumb' => $breadcrumb,
			'label'      => $entity->{{ titleGetter }},
			'data'       => $data,
			'actions'    => $actions,
			'topActions' => $topActions
		]);
	}

	public function edit($id)
	{
		/* @var $entity {{ model }} */
		$entity = $this->{{ classData.snake }}Repository->findById($id);

		$label = \Lang::get('l4-backoffice::default.edit');

		$form = $this->buildForm(
			$this->secureUrl->route('backoffice.{{ classData.snake }}.update', $id),
			$label,
			'PUT',
			$this->secureUrl->route('backoffice.{{ classData.snake }}.show', $id)
		);

		$form->fill([
			{{# inputs }}
			'{{ name }}' => $entity->{{ name }},
			{{/ inputs }}
			{{# dependencies }}
			'{{ column }}' => $entity->{{ singular }}->id,
			{{/ dependencies }}
		]);

		$breadcrumb = $this->backoffice->breadcrumb([
			'Home' => 'backoffice.index',
			$this->titlePlural => 'backoffice.{{ classData.snake }}.index',
			$entity->{{ titleGetter }} => ['backoffice.{{ classData.snake }}.show', $id],
			\Lang::get('l4-backoffice::default.edit')
		]);

		return \View::make('l4-backoffice::edit', [
			'title'      => 'Edit {{ classData.name }}',
			'form'       => $form,
			'breadcrumb' => $breadcrumb
		]);
	}

	public function update($id)
	{
		/* @var $entity {{ model }} */
        $entity = $this->{{ classData.snake }}Repository->findById($id);

		// Get the input
		$inputData = array_filter(\Input::only([
            {{# inputs }}
            '{{ name }}',
            {{/ inputs }}
            {{# dependencies }}
            '{{ column }}',
            {{/ dependencies }}
        ]), function($value){
	         return !empty($value) && $value !== false;
	    });

		try
		{
			// Validate the input
			$this->validate($inputData);

			// Fill the entity
            $entity->fill($inputData);

			// Try to save it
			$entity->save();

			// Redirect to show
			return \Redirect::to($this->secureUrl->route('backoffice.{{ classData.snake }}.show', [$entity->getKey()]));
		}
		catch (ValidationException $e)
		{
			// Or redirect back with the errors
			return \Redirect::back()->withInput()->withErrors($e->getErrors());
		}
		catch (PermissionException $e)
		{
			return \Redirect::to($this->secureUrl->route('backoffice.index'));
		}
	}

	public function destroy($id)
	{
		try
		{
			// Try to destroy the entity
			$this->{{ classData.snake }}Repository->destroy($id);

			// Redirect to the listing
			return \Redirect::$this->secureUrl->route('backoffice.{{ classData.snake }}.index')->with(['success' => "{{ classData.name }} $id deleted"]);
		}
		catch (ValidationException $e)
		{
			return \Redirect::back()->withErrors($e->getErrors());
		}
		catch (PermissionException $e)
		{
			return \Redirect::to($this->secureUrl->route('backoffice.index'));
		}
	}

	public function export()
	{
		$list = $this->getListing();

		$list->fill($this->getData(null));

		$columns = $list->columns()->hide([])->sortable([]);
		$rows = $list->rows();

		$this->excelExporter->create(\Str::slug($this->titlePlural), function($excel) use ($columns, $rows) {
			$excel->sheet($this->titlePlural, function($sheet) use ($columns, $rows) {
				$sheet->loadView('l4-backoffice::lists.list', [
					'bulkActions' => [],
					'rowActions' => [],
					'columns' => $columns,
					'items' => $rows
				]);
			});
		})->download('xls');
	}

	protected function buildForm($target, $label, $method = 'POST', $cancelAction = '', $options = [])
	{
		$form = $this->backoffice->form($target, $label, $method, $cancelAction, $options);

		$inputs = $form->inputs();

		{{# dependencies }}
		${{ camelCase }} = ['' => ''] + $this->{{ camelCase }}Repository->all()->lists('{{ titleGetter }}', 'id');
		$inputs->dropdown('{{ column }}', '{{ title }}', ${{ camelCase }}, ['placeholder' => '{{ title }}']);
		{{/ dependencies }}
		{{# inputs }}
		$inputs->{{ type }}('{{ name }}', '{{ title }}');
		{{/ inputs }}

		return $form;
	}

	/**
	 * @param $list
	 */
	protected function buildFilters(Listing $list)
	{
		$filters = $list->filters();

		// Here we add filters to the list
		{{# inputs }}
		$filters->{{ type }}('{{ name }}', '{{ title }}', ['class' => 'form-control']);
		{{/ inputs }}

		// And filter dependencies
		{{# dependencies }}
        ${{ camelCase }} = ['' => ''] + $this->{{ camelCase }}Repository->all()->lists('{{ titleGetter }}', 'id');
        $filters->dropdown('{{ column }}', '{{ title }}', ${{ camelCase }}, ['placeholder' => '{{ title }}']);

        {{/ dependencies }}
	}

	/**
	 * @return mixed
	 */
	protected function getListing()
	{
		$listing = $this->backoffice->listing([
			{{# columns }}
			'{{ name }}' => '{{ title }}',
			{{/ columns }}
			{{# dependencies }}
			'{{ singular }}.{{ titleGetter }}' => '{{ title }}',
			'{{ singular }}',
			{{/ dependencies }}
		]);

		$columns = $listing->columns();
		$columns
			->hide([
				{{# hiddenColumns }}
				'{{ name }}',
				{{/ hiddenColumns }}
				{{# dependencies }}
                '{{ singular }}',
                {{/ dependencies }}
			])
			->sortable([
			{{# inputs }}
				'{{ name }}',
			{{/ inputs }}
			{{# dependencies }}
            '{{ singular }}.{{ titleGetter }}',
            {{/ dependencies }}
		]);

		{{# dependencies }}
        $columns->setAccessor('{{ singular }}.{{ titleGetter }}', function($row){
            return $row['{{ singular }}']['{{ titleGetter }}'];
        });
        {{/ dependencies }}

		return $listing;
	}

	protected function buildListActions(Listing $list)
	{
		$listActions = $this->backoffice->actions();
		try {
            $listActions->link($this->secureUrl->route('backoffice.{{ classData.snake }}.create'), FontAwesome::icon('plus') . ' New {{ classData.name }}', ['class' => 'btn btn-primary']);
        } catch (PermissionException $e) {}
        try {
            $listActions->link($this->secureUrl->route('backoffice.{{ classData.snake }}.export', \Input::all()), FontAwesome::icon('file-excel-o') . ' Export', ['class' => 'btn btn-success']);
        } catch (PermissionException $e) {}

		$list->setActions($listActions);

		$rowActions = $this->backoffice->actions();

		// View icon
		$rowActions->link(
			function(\Illuminate\Support\Collection $row) {
				try {
					return $this->secureUrl->route('backoffice.{{ classData.snake }}.show', $row['id']);
				} catch (PermissionException $e) { return false; }
			},
			FontAwesome::icon('eye'),
			[
				'data-toggle'    => 'tooltip',
				'data-placement' => 'top',
				'title'          => \Lang::get('l4-backoffice::default.show')
			]
		);

		// Edit icon
		$rowActions->link(
			function(\Illuminate\Support\Collection $row){
				try {
					return $this->secureUrl->route('backoffice.{{ classData.snake }}.edit', $row['id']);
				} catch (PermissionException $e) { return false; }
			},
			FontAwesome::icon('edit'),
			[
				'class'          => 'text-success',
				'data-toggle'    => 'tooltip',
				'data-placement' => 'top',
				'title'          => \Lang::get('l4-backoffice::default.edit')
			]
		);

		// Delete icon
		$rowActions->form(
			function(\Illuminate\Support\Collection $row){
				try {
					return $this->secureUrl->route('backoffice.{{ classData.snake }}.destroy', $row['id']);
				} catch (PermissionException $e) { return false; }
			},
			FontAwesome::icon('times'),
			'DELETE',
			[
				'class'          => 'text-danger',
				'data-toggle'    => 'tooltip',
				'data-placement' => 'top',
				'data-confirm'   => \Lang::get('l4-backoffice::default.delete-confirm'),
				'title'          => \Lang::get('l4-backoffice::default.delete')
			],
			true
		);

		$list->setRowActions($rowActions);
	}

	/**
	 * @return array
	 */
	protected function getData($limit = 10)
	{
		{{# hasDependencies }}
		$this->{{ classData.snake }}Repository->with([
			{{# dependencies }}
			'{{ singular }}',
			{{/ dependencies }}
		]);
		{{/ hasDependencies }}
		return $this->{{ classData.snake }}Repository->search(
            \Input::except(['page', 'sort_by', 'sort_sense']),
            \Input::get('sort_by'),
            \Input::get('sort_sense'),
            $limit,
            \Input::get('page', 1)
        );
	}

    protected function validate($inputData)
    {
        {{# hasRequiredFields }}
        $validationRules = [
            {{# requiredFields }}
            '{{ name }}' => 'required',
            {{/ requiredFields }}
        ];

        $validationMsgs = [
            {{# requiredFields }}
            '{{ name }}.required' => 'The {{ title }} field is required.',
            {{/ requiredFields }}
        ];

        $validator = \Validator::make($inputData, $validationRules, $validationMsgs);

        if ($validator->fails())
        {
            throw new ValidationException($validator->errors());
        }
        {{/ hasRequiredFields }}
    }
}
